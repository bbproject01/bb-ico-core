/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MyToken,
  MyTokenInterface,
} from "../../../contracts/ICO.sol/MyToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "totalSupply_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSupply_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "disableMaxSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "enableMaxSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200153e3803806200153e83398101604081905262000034916200024f565b6200003f3362000123565b60036200004d868262000374565b5060046200005c858262000374565b506005805460ff191660ff8516179055620000926200007d84600a62000553565b836200017360201b620007391790919060201c565b600655620000bb620000a684600a62000553565b826200017360201b620007391790919060201c565b6007556006543360008181526001602081815260408084208690556008805460ff19169093179092559051938452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050506200057e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600062000181828462000564565b90505b92915050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620001b257600080fd5b81516001600160401b0380821115620001cf57620001cf6200018a565b604051601f8301601f19908116603f01168101908282118183101715620001fa57620001fa6200018a565b816040528381526020925086838588010111156200021757600080fd5b600091505b838210156200023b57858201830151818301840152908201906200021c565b600093810190920192909252949350505050565b600080600080600060a086880312156200026857600080fd5b85516001600160401b03808211156200028057600080fd5b6200028e89838a01620001a0565b96506020880151915080821115620002a557600080fd5b50620002b488828901620001a0565b945050604086015160ff81168114620002cc57600080fd5b6060870151608090970151959894975095949392505050565b600181811c90821680620002fa57607f821691505b6020821081036200031b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200036f57600081815260208120601f850160051c810160208610156200034a5750805b601f850160051c820191505b818110156200036b5782815560010162000356565b5050505b505050565b81516001600160401b038111156200039057620003906200018a565b620003a881620003a18454620002e5565b8462000321565b602080601f831160018114620003e05760008415620003c75750858301515b600019600386901b1c1916600185901b1785556200036b565b600085815260208120601f198616915b828110156200041157888601518255948401946001909101908401620003f0565b5085821015620004305787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620004975781600019048211156200047b576200047b62000440565b808516156200048957918102915b93841c93908002906200045b565b509250929050565b600082620004b05750600162000184565b81620004bf5750600062000184565b8160018114620004d85760028114620004e35762000503565b600191505062000184565b60ff841115620004f757620004f762000440565b50506001821b62000184565b5060208310610133831016604e8410600b841016171562000528575081810a62000184565b62000534838362000456565b80600019048211156200054b576200054b62000440565b029392505050565b60006200018160ff8416836200049f565b808202811582820484141762000184576200018462000440565b610fb0806200058e6000396000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c8063715018a6116100cd578063a457c2d711610081578063dd62ed3e11610066578063dd62ed3e146102a1578063f2fde38b146102da578063f6808db6146102ed57600080fd5b8063a457c2d71461027b578063a9059cbb1461028e57600080fd5b80638da5cb5b116100b25780638da5cb5b146102505780638db64cec1461026b57806395d89b411461027357600080fd5b8063715018a61461023557806379cc67901461023d57600080fd5b8063313ce5671161012457806340c10f191161010957806340c10f19146101e457806342966c68146101f957806370a082311461020c57600080fd5b8063313ce567146101bc57806339509351146101d157600080fd5b806306fdde0314610156578063095ea7b31461017457806318160ddd1461019757806323b872dd146101a9575b600080fd5b61015e6102f5565b60405161016b9190610d45565b60405180910390f35b610187610182366004610daf565b610387565b604051901515815260200161016b565b6006545b60405190815260200161016b565b6101876101b7366004610dd9565b61039e565b60055460405160ff909116815260200161016b565b6101876101df366004610daf565b610407565b6101f76101f2366004610daf565b61043d565b005b6101f7610207366004610e15565b61058f565b61019b61021a366004610e2e565b6001600160a01b031660009081526001602052604090205490565b6101f761059c565b6101f761024b366004610daf565b6105b0565b6000546040516001600160a01b03909116815260200161016b565b6101f7610616565b61015e61062d565b610187610289366004610daf565b61063c565b61018761029c366004610daf565b61068b565b61019b6102af366004610e49565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6101f76102e8366004610e2e565b610698565b6101f7610725565b60606003805461030490610e7c565b80601f016020809104026020016040519081016040528092919081815260200182805461033090610e7c565b801561037d5780601f106103525761010080835404028352916020019161037d565b820191906000526020600020905b81548152906001019060200180831161036057829003601f168201915b5050505050905090565b600061039433848461074c565b5060015b92915050565b60006103ab8484846108a5565b6103fd84336103f885604051806060016040528060288152602001610f0a602891396001600160a01b038a1660009081526002602090815260408083203384529091529020549190610aab565b61074c565b5060019392505050565b3360008181526002602090815260408083206001600160a01b038716845290915281205490916103949185906103f89086610ad7565b610445610ae3565b60085460ff1615156001146104a15760405162461bcd60e51b815260206004820152601960248201527f45524332303a206d617820737570706c7920726561636865640000000000000060448201526064015b60405180910390fd5b6007546006546104b19083610ad7565b11156104ff5760405162461bcd60e51b815260206004820152601a60248201527f45524332303a206d617820737570706c792065786365656465640000000000006044820152606401610498565b60065461050c9082610ad7565b6006556001600160a01b0382166000908152600160205260409020546105329082610ad7565b6001600160a01b0383166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105839085815260200190565b60405180910390a35050565b6105993382610b3d565b50565b6105a4610ae3565b6105ae6000610cd1565b565b60006105fa82604051806060016040528060248152602001610f32602491396001600160a01b03861660009081526002602090815260408083203384529091529020549190610aab565b905061060783338361074c565b6106118383610b3d565b505050565b61061e610ae3565b6008805460ff19166001179055565b60606004805461030490610e7c565b600061039433846103f885604051806060016040528060258152602001610f56602591393360009081526002602090815260408083206001600160a01b038d1684529091529020549190610aab565b60006103943384846108a5565b6106a0610ae3565b6001600160a01b03811661071c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610498565b61059981610cd1565b61072d610ae3565b6008805460ff19169055565b60006107458284610ecc565b9392505050565b6001600160a01b0383166107c75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610498565b6001600160a01b0382166108435760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610498565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166109215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610498565b6001600160a01b03821661099d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610498565b6001600160a01b038316600090815260016020526040902054811115610a055760405162461bcd60e51b815260206004820152601b60248201527f45524332303a20696e73756666696369656e742062616c616e636500000000006044820152606401610498565b6001600160a01b038316600090815260016020526040902054610a289082610d39565b6001600160a01b038085166000908152600160205260408082209390935590841681522054610a579082610ad7565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108989085815260200190565b60008184841115610acf5760405162461bcd60e51b81526004016104989190610d45565b505050900390565b60006107458284610ee3565b6000546001600160a01b031633146105ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610498565b6001600160a01b038216610bb95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610498565b6001600160a01b038216600090815260016020526040902054811115610c475760405162461bcd60e51b815260206004820152602760248201527f45524332303a20696e73756666696369656e742062616c616e636520666f722060448201527f6275726e696e67000000000000000000000000000000000000000000000000006064820152608401610498565b6001600160a01b038216600090815260016020526040902054610c6a9082610d39565b6001600160a01b038316600090815260016020526040902055600654610c909082610d39565b6006556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610583565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006107458284610ef6565b600060208083528351808285015260005b81811015610d7257858101830151858201604001528201610d56565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610daa57600080fd5b919050565b60008060408385031215610dc257600080fd5b610dcb83610d93565b946020939093013593505050565b600080600060608486031215610dee57600080fd5b610df784610d93565b9250610e0560208501610d93565b9150604084013590509250925092565b600060208284031215610e2757600080fd5b5035919050565b600060208284031215610e4057600080fd5b61074582610d93565b60008060408385031215610e5c57600080fd5b610e6583610d93565b9150610e7360208401610d93565b90509250929050565b600181811c90821680610e9057607f821691505b602082108103610eb057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761039857610398610eb6565b8082018082111561039857610398610eb6565b8181038181111561039857610398610eb656fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220737e588d87774624ac0f432523686ef75018fdf460785cdf1687c2c076ee125f64736f6c63430008110033";

type MyTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyToken__factory extends ContractFactory {
  constructor(...args: MyTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    totalSupply_: PromiseOrValue<BigNumberish>,
    maxSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MyToken> {
    return super.deploy(
      name_,
      symbol_,
      decimals_,
      totalSupply_,
      maxSupply_,
      overrides || {}
    ) as Promise<MyToken>;
  }
  override getDeployTransaction(
    name_: PromiseOrValue<string>,
    symbol_: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    totalSupply_: PromiseOrValue<BigNumberish>,
    maxSupply_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      decimals_,
      totalSupply_,
      maxSupply_,
      overrides || {}
    );
  }
  override attach(address: string): MyToken {
    return super.attach(address) as MyToken;
  }
  override connect(signer: Signer): MyToken__factory {
    return super.connect(signer) as MyToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyTokenInterface {
    return new utils.Interface(_abi) as MyTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyToken {
    return new Contract(address, _abi, signerOrProvider) as MyToken;
  }
}
